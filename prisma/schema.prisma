generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  email               String         @unique
  password            String         @default("")
  username            String         @default("")
  firstName           String         @default("")
  lastName            String         @default("")
  role                UserRole       @default(USER)
  userStatus          UserStatus     @default(ACTIVE)
  fcmToken            String?        @default("")
  dob                 DateTime?
  profileImage        String         @default("")
  profileUrl          String?
  planType            PlanType       @default(BASIC)
  isSubscribed        Boolean        @default(false)
  permissionScanCount Int            @default(5)
  scanCount           Int            @default(0)
  expirationOtp       DateTime?
  otp                 Int?
  isNotification      Boolean        @default(true)
  status              UserStatus     @default(ACTIVE)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  notifications       Notification[] @relation("UserRelation")
  review              Review[]
  subscription        Subscription[]

  courses     Courses[]
  videos      Videos[]
  notes       Notes[]
  quizzes     Quizzes[]
  assignments Assignments[]

  watchHistory WatchHistory[]
  enrollment   Enrollment[]

  sentChats     Chat[]        @relation("ChatsSent")
  receivedChats Chat[]        @relation("ChatsReceived")
  sentRooms     Room[]        @relation("RoomsSent")
  receivedRooms Room[]        @relation("RoomsReceived")

  @@map("users")
}

model Courses {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @default("")
  description   String        @default("")
  thumbnailUrl  String        @default("")
  price         Float         @default(0)
  teacherId     String        @db.ObjectId
  user          User          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  level         String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  videos        Videos[]
  notes         Notes[]
  quizzes       Quizzes[]
  assignments   Assignments[]
  review        Review[]
  videoCount    Int           @default(0)
  videoDuration String        @default("")
  reviewCount   Int           @default(0)
  enrollment    Enrollment[]
  recommended   Boolean       @default(false)

  @@map("courses")
}

model Videos {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  videoUrl      String         @default("")
  title         String         @default("")
  teacherId     String         @db.ObjectId
  user          User           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  courseId      String         @db.ObjectId
  course        Courses        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videoDuration String         @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  serialNo      Int            @default(0)
  watchHistory  WatchHistory[]

  @@map("videos")
}

model Notes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @default("")
  documentUrl String   @default("")
  teacherId   String   @db.ObjectId
  user        User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String   @db.ObjectId
  course      Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Quizzes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @default("")
  documentUrl String   @default("")
  teacherId   String   @db.ObjectId
  user        User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  courseId    String   @db.ObjectId
  course      Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("quizzes")
}

model Assignments {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @default("")
  documentUrl String   @default("")
  teacherId   String   @db.ObjectId
  user        User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  courseId    String   @db.ObjectId
  course      Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("assignments")
}

model WatchHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  videoId   String   @db.ObjectId
  watchedAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Videos @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model Enrollment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String   @db.ObjectId
  courseId      String   @db.ObjectId
  paymentId     String   @default("")
  paymentStatus Boolean  @default(true)
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course        Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([studentId, courseId]) // Prevent duplicate enrollments
  @@map("enrollments")
}

model Review {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  rating   Int     @default(0)
  courseId String  @db.ObjectId
  userId   String  @db.ObjectId
  course   Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  message    String?
  roomId     String   @db.ObjectId
  timerId    String?   @db.ObjectId
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("ChatsSent", fields: [senderId], references: [id])
  receiver User @relation("ChatsReceived", fields: [receiverId], references: [id])

  room Room @relation(fields: [roomId], references: [id])

  @@map("chats")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("RoomsSent", fields: [senderId], references: [id])
  receiver   User     @relation("RoomsReceived", fields: [receiverId], references: [id])

  chat Chat[]

  @@map("rooms")
}

model SubscriptionPlan {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  type          PlanType       @default(BASIC)
  description   String[]
  price         Float
  trialDays     Int            @default(7)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  userId        String           @db.ObjectId
  user          User             @relation(fields: [userId], references: [id])
  planId        String           @db.ObjectId
  plan          SubscriptionPlan @relation(fields: [planId], references: [id])
  startDate     DateTime
  endDate       DateTime
  isTrial       Boolean          @default(true)
  isRenewed     Boolean          @default(false)
  agreedToTerms Boolean          @default(false)
  paymentInfo   String? // store tokenized reference or masked info
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model PrivacyPolicy {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @default("")
}

model TermsAndConditions {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @default("")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String?  @default("")
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserRelation", fields: [userId], references: [id])

  @@map("notifications")
}

enum SubscriptionType {
  MONTHLY
  YEARLY
}

enum PlanType {
  BASIC
  MONTHLY
  YEARLY
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
